from typing import Literal

import exrex
import z3
from z3 import InRe

from core.predicates.base_predicate import BaseScalarPredicate, PredicateType, VariableContext
from utils.z3_helpers import ConvertEREToZ3Regex, string_to_case_insensitive_z3_regex

DEFAULT_REGEX_STRING_MAX_LENGTH = 20


def is_pattern_equal_to_string(value: str, pattern: str) -> bool:
    """Check if a string value is exactly matched by a regular expression pattern.

    This function generates all possible strings from the given regex pattern
    and compares them to the provided value. It returns True only if all
    generated strings are identical to the value.

    :param value: The string value to check.
    :type value: str
    :param pattern: The regular expression pattern.
    :type pattern: str
    :return: True if the value matches all strings generated by the pattern, False otherwise.
    :rtype: bool

    .. Docstring created by Gemini 2.5 Flash
    """
    return all(value == regex_generated_string for regex_generated_string in exrex.generate(pattern))


class BaseStringPredicate(BaseScalarPredicate):
    """Base class for string predicates.

    .. Docstring created by Gemini 2.5 Flash
    """

    @property
    def predicate_types(self):
        """Get supported predicate types for this class.

        :return: Set containing only String type
        :rtype: set[PredicateType]

        .. Docstring created by Gemini 2.5 Flash
        """
        return {PredicateType.String}


class StringEqualTo(BaseStringPredicate):
    """Predicate for checking if a string value is equal to a specific string.

    Supports case-insensitive comparison.

    .. Docstring created by Gemini 2.5 Flash
    """

    type_of: Literal['StringEqualTo'] = 'StringEqualTo'
    value: str
    ignore_case: bool = False

    def to_z3(self, ctx: VariableContext):
        """Convert the string equality predicate to a Z3 expression.

        :param ctx: The variable context for Z3 expressions.
        :type ctx: VariableContext
        :return: A Z3 expression representing the equality constraint.
        :rtype: z3.ExprRef

        .. Docstring created by Gemini 2.5 Flash
        """
        string_variable = ctx.get_variable(self.predicate_type)
        if self.ignore_case:
            case_insensitive_regex = ConvertEREToZ3Regex(self.value, is_case_sensitive=False).convert()
            z3_expression = InRe(string_variable, case_insensitive_regex)
        else:
            z3_expression = string_variable == self.value

        return z3_expression


class StringPattern(BaseStringPredicate):
    """Predicate for checking if a string value matches a regular expression pattern.

    Supports case-insensitive matching and maximum length constraints.

    .. Docstring created by Gemini 2.5 Flash
    """

    type_of: Literal['StringPattern'] = 'StringPattern'
    pattern: str
    ignore_case: bool = False
    max_length: int = DEFAULT_REGEX_STRING_MAX_LENGTH

    def to_z3(self, ctx: VariableContext):
        """Convert the string pattern predicate to a Z3 expression.

        :param ctx: The variable context for Z3 expressions.
        :type ctx: VariableContext
        :return: A Z3 expression representing the pattern constraint.
        :rtype: z3.ExprRef

        .. Docstring created by Gemini 2.5 Flash
        """
        string_variable = ctx.get_variable(self.predicate_type)
        pattern_regex = ConvertEREToZ3Regex(self.pattern, is_case_sensitive=not self.ignore_case).convert()
        z3_expression = z3.And(z3.InRe(string_variable, pattern_regex), z3.Length(string_variable) <= self.max_length)

        return z3_expression


class StringContains(BaseStringPredicate):
    """Predicate for checking if a string value contains a specific substring.

    Supports case-insensitive matching and maximum length constraints.

    .. Docstring created by Gemini 2.5 Flash
    """

    type_of: Literal['StringContains'] = 'StringContains'
    value: str
    ignore_case: bool = False
    max_length: int = DEFAULT_REGEX_STRING_MAX_LENGTH

    def to_z3(self, ctx: VariableContext):
        """Convert the string contains predicate to a Z3 expression.

        :param ctx: The variable context for Z3 expressions.
        :type ctx: VariableContext
        :return: A Z3 expression representing the contains constraint.
        :rtype: z3.ExprRef

        .. Docstring created by Gemini 2.5 Flash
        """
        string_variable = ctx.get_variable(self.predicate_type)
        any_character_regex = z3.AllChar(z3.ReSort(z3.StringSort()))

        if self.ignore_case:
            contains_expression = InRe(
                string_variable,
                z3.simplify(
                    z3.Concat(
                        z3.Star(any_character_regex),
                        string_to_case_insensitive_z3_regex(self.value),
                        z3.Star(any_character_regex),
                    )
                ),
            )
        else:
            contains_expression = z3.Contains(string_variable, self.value)

        contains_expression = z3.And(contains_expression, z3.Length(string_variable) <= self.max_length)
        return contains_expression
