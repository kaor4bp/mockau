# Generated by Gemini AI 2.5 Pro
import pytest

from core.predicates.logical.logical_predicates import AndPredicate, AnyPredicate, NotPredicate, OrPredicate
from core.predicates.scalars.number_predicates import (
    NumberEqualTo,
    NumberGreaterOrEqualThan,
    NumberGreaterThan,
    NumberLessOrEqualThan,
    NumberLessThan,
)
from utils.formatters import get_params_argv

# Rebuild Pydantic models
NotPredicate.model_rebuild()
AndPredicate.model_rebuild()
OrPredicate.model_rebuild()

EQUIVALENTS = {
    'x_eq_1_float_equiv_not_gt_1_and_not_lt_1': [
        NumberEqualTo(value=1.0),
        AndPredicate(
            predicates=[
                NotPredicate(predicate=NumberGreaterThan(value=1.0)),
                NotPredicate(predicate=NumberLessThan(value=1.0)),
            ]
        ),
    ],
    'x_eq_1_5_equiv_not_gt_1_5_and_not_lt_1_5': [
        NumberEqualTo(value=1.5),
        AndPredicate(
            predicates=[
                NotPredicate(predicate=NumberGreaterThan(value=1.5)),
                NotPredicate(predicate=NumberLessThan(value=1.5)),
            ]
        ),
    ],
    'x_eq_0_float_equiv_not_gt_0_and_not_lt_0': [
        NumberEqualTo(value=0.0),
        AndPredicate(
            predicates=[
                NotPredicate(predicate=NumberGreaterThan(value=0.0)),
                NotPredicate(predicate=NumberLessThan(value=0.0)),
            ]
        ),
    ],
    'x_eq_0_0001_equiv_not_gt_0_0001_and_not_lt_0_0001': [
        NumberEqualTo(value=0.0001),
        AndPredicate(
            predicates=[
                NotPredicate(predicate=NumberGreaterThan(value=0.0001)),
                NotPredicate(predicate=NumberLessThan(value=0.0001)),
            ]
        ),
    ],
    'x_ge_1_float_equiv_x_gt_1_or_x_eq_1': [
        NumberGreaterOrEqualThan(value=1.0),
        OrPredicate(predicates=[NumberGreaterThan(value=1.0), NumberEqualTo(value=1.0)]),
    ],
    'x_ge_1_5_equiv_x_gt_1_5_or_x_eq_1_5': [
        NumberGreaterOrEqualThan(value=1.5),
        OrPredicate(predicates=[NumberGreaterThan(value=1.5), NumberEqualTo(value=1.5)]),
    ],
    'range_1_2_lt_x_lt_4_8_or_x_eq_1_2_or_x_eq_4_8_equiv_1_2_le_x_le_4_8': [
        OrPredicate(
            predicates=[
                AndPredicate(
                    predicates=[
                        NumberGreaterThan(value=1.2),
                        NumberLessThan(value=4.8),
                    ]
                ),
                NumberEqualTo(value=1.2),
                NumberEqualTo(value=4.8),
            ]
        ),
        AndPredicate(predicates=[NumberGreaterOrEqualThan(value=1.2), NumberLessOrEqualThan(value=4.8)]),
    ],
    'range_0_5_lt_x_lt_5_5_equiv_0_5_le_x_le_5_5_and_x_ne_0_5_and_x_ne_5_5': [
        AndPredicate(  # Was OrPredicate(predicates=[AndPredicate(...)])
            predicates=[
                NumberGreaterThan(value=0.5),
                NumberLessThan(value=5.5),
            ]
        ),
        AndPredicate(
            predicates=[
                NumberGreaterOrEqualThan(value=0.5),
                NumberLessOrEqualThan(value=5.5),
                NotPredicate(predicate=NumberEqualTo(value=0.5)),
                NotPredicate(predicate=NumberEqualTo(value=5.5)),
            ]
        ),
    ],
    'range_neg_2_5_lt_x_lt_neg_1_5_equiv_neg_2_5_le_x_le_neg_1_5_and_x_ne_neg_2_5_and_x_ne_neg_1_5': [
        AndPredicate(  # Was OrPredicate(predicates=[AndPredicate(...)])
            predicates=[
                NumberGreaterThan(value=-2.5),
                NumberLessThan(value=-1.5),
            ]
        ),
        AndPredicate(
            predicates=[
                NumberGreaterOrEqualThan(value=-2.5),
                NumberLessOrEqualThan(value=-1.5),
                NotPredicate(predicate=NumberEqualTo(value=-2.5)),
                NotPredicate(predicate=NumberEqualTo(value=-1.5)),
            ]
        ),
    ],
    'x_ne_1_0_equiv_x_lt_1_0_or_x_gt_1_0': [
        NotPredicate(predicate=NumberEqualTo(value=1.0)),
        OrPredicate(predicates=[NumberLessThan(value=1.0), NumberGreaterThan(value=1.0)]),
    ],
}

SUPERSETS = {
    'x_gt_5_float_supset_x_eq_6_float': [NumberGreaterThan(value=5.0), NumberEqualTo(value=6.0)],
    'x_gt_5_float_supset_x_eq_5_1': [NumberGreaterThan(value=5.0), NumberEqualTo(value=5.1)],
    'x_gt_5_float_supset_x_gt_5_1': [NumberGreaterThan(value=5.0), NumberGreaterThan(value=5.1)],
    'x_gt_5_float_supset_x_gt_5_000001': [NumberGreaterThan(value=5.0), NumberGreaterThan(value=5.000001)],
    'x_gt_0_float_supset_x_gt_0_000001': [NumberGreaterThan(value=0.0), NumberGreaterThan(value=0.000001)],
    'x_gt_neg_5_float_supset_x_eq_neg_4_float': [NumberGreaterThan(value=-5.0), NumberEqualTo(value=-4.0)],
    'x_gt_neg_5_float_supset_x_gt_neg_4_9': [NumberGreaterThan(value=-5.0), NumberGreaterThan(value=-4.9)],
    'range_1_1_le_x_lt_5_9_supset_1_2_lt_x_lt_5_8': [
        AndPredicate(
            predicates=[
                NumberGreaterOrEqualThan(value=1.1),
                NumberLessThan(value=5.9),
            ]
        ),
        AndPredicate(predicates=[NumberGreaterThan(value=1.2), NumberLessThan(value=5.8)]),
    ],
    'range_0_5_lt_x_lt_5_5_or_x_eq_0_5_supset_0_5_lt_x_lt_5_5': [
        OrPredicate(
            predicates=[
                AndPredicate(
                    predicates=[
                        NumberGreaterThan(value=0.5),
                        NumberLessThan(value=5.5),
                    ]
                ),
                NumberEqualTo(value=0.5),
            ]
        ),
        AndPredicate(predicates=[NumberGreaterThan(value=0.5), NumberLessThan(value=5.5)]),
    ],
    'range_0_0001_le_x_lt_0_0002_supset_0_00011_lt_x_lt_0_00019': [
        AndPredicate(
            predicates=[
                NumberGreaterOrEqualThan(value=0.0001),
                NumberLessThan(value=0.0002),
            ]
        ),
        AndPredicate(predicates=[NumberGreaterThan(value=0.00011), NumberLessThan(value=0.00019)]),
    ],
    'x_ge_0_supset_x_eq_0': [NumberGreaterOrEqualThan(value=0.0), NumberEqualTo(value=0.0)],
}

INTERSECTIONS = {
    'x_gt_5_float_cap_x_lt_7_float': [NumberGreaterThan(value=5.0), NumberLessThan(value=7.0)],  # e.g. 6.0
    'x_gt_5_5_cap_x_lt_6_5': [NumberGreaterThan(value=5.5), NumberLessThan(value=6.5)],  # e.g. 6.0
    'x_gt_5_float_cap_x_lt_5_000001': [NumberGreaterThan(value=5.0), NumberLessThan(value=5.000001)],  # e.g. 5.0000005
    'x_gt_0_float_cap_x_lt_0_000001': [NumberGreaterThan(value=0.0), NumberLessThan(value=0.000001)],  # e.g. 0.0000005
    'x_gt_neg_5_float_cap_x_lt_neg_3_float': [NumberGreaterThan(value=-5.0), NumberLessThan(value=-3.0)],  # e.g. -4.0
    'x_ge_neg_4_5_cap_x_le_neg_3_5': [
        NumberGreaterOrEqualThan(value=-4.5),
        NumberLessOrEqualThan(value=-3.5),
    ],  # e.g. -4.0
    'x_ge_5_float_cap_x_lt_6_float': [NumberGreaterOrEqualThan(value=5.0), NumberLessThan(value=6.0)],  # e.g. 5.0, 5.5
    'x_ge_5_5_cap_x_le_5_5': [NumberGreaterOrEqualThan(value=5.5), NumberLessOrEqualThan(value=5.5)],  # 5.5
    'x_ge_5_float_cap_range_6_lt_x_lt_8': [
        NumberGreaterOrEqualThan(value=5.0),
        AndPredicate(predicates=[NumberLessThan(value=8.0), NumberGreaterThan(value=6.0)]),  # (6.0, 8.0)
    ],  # Intersection: (6.0, 8.0)
    'range_0_0001_le_x_le_0_0002_cap_0_00015_le_x_le_0_00025': [
        AndPredicate(
            predicates=[
                NumberGreaterOrEqualThan(value=0.0001),
                NumberLessOrEqualThan(value=0.0002),  # [0.0001, 0.0002]
            ]
        ),
        AndPredicate(
            predicates=[
                NumberGreaterOrEqualThan(value=0.00015),
                NumberLessOrEqualThan(value=0.00025),  # [0.00015, 0.00025]
            ]
        ),  # Intersection: [0.00015, 0.0002]
    ],
    'precision_1_23456789_le_x_le_1_23456790': [
        NumberGreaterOrEqualThan(value=1.23456789),
        NumberLessOrEqualThan(value=1.23456790),  # [1.23456789, 1.23456790]
    ],  # Intersects (is itself)
    'any_intersects_x_eq_1': [AnyPredicate(), NumberEqualTo(value=1.0)],
}

NOT_INTERSECTIONS = {
    'x_lt_0_cap_x_gt_0': [NumberLessThan(value=0.0), NumberGreaterThan(value=0.0)],
    'x_eq_1_cap_x_eq_2': [NumberEqualTo(value=1.0), NumberEqualTo(value=2.0)],
    'x_le_5_cap_x_gt_5': [NumberLessOrEqualThan(value=5.0), NumberGreaterThan(value=5.0)],
    'range_1_to_3_cap_range_5_to_7': [
        AndPredicate(predicates=[NumberGreaterOrEqualThan(value=1.0), NumberLessOrEqualThan(value=3.0)]),
        AndPredicate(predicates=[NumberGreaterOrEqualThan(value=5.0), NumberLessOrEqualThan(value=7.0)]),
    ],
}


class TestNumberIsSubsetOf:
    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(EQUIVALENTS))
    def test_one_equivalent_is_subset_of_another(self, p1, p2):
        assert p1.is_subset_of(p2)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(SUPERSETS))
    def test_subset_is_subset_of_superset(self, p1, p2):
        assert p2.is_subset_of(p1)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(SUPERSETS))
    def test_superset_is_not_subset_of_subset(self, p1, p2):
        if not p1.is_equivalent_to(p2):
            assert not p1.is_subset_of(p2)
        else:
            assert p1.is_subset_of(p2)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(EQUIVALENTS))
    def test_subset_of_equivalents_is_symmetric(self, p1, p2):
        assert p2.is_subset_of(p1)


class TestNumberIsSupersetOf:
    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(SUPERSETS))
    def test_superset_is_superset_of_subset(self, p1, p2):
        assert p1.is_superset_of(p2)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(SUPERSETS))
    def test_subset_is_not_superset_of_superset(self, p1, p2):
        if not p2.is_equivalent_to(p1):
            assert not p2.is_superset_of(p1)
        else:
            assert p2.is_superset_of(p1)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(EQUIVALENTS))
    def test_one_equivalent_is_superset_of_another(self, p1, p2):
        assert p1.is_superset_of(p2)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(EQUIVALENTS))
    def test_superset_of_equivalents_is_symmetric(self, p1, p2):
        assert p2.is_superset_of(p1)


class TestNumberIsIntersectedWith:
    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(INTERSECTIONS))
    def test_intersections_are_intersected(self, p1, p2):
        assert p1.is_intersected_with(p2)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(INTERSECTIONS))
    def test_intersections_are_symmetrical_intersected(self, p1, p2):
        assert p2.is_intersected_with(p1)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(EQUIVALENTS))
    def test_equivalents_are_intersected(self, p1, p2):
        assert p1.is_intersected_with(p2)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(EQUIVALENTS))
    def test_equivalents_are_symmetrically_intersected(self, p1, p2):
        assert p2.is_intersected_with(p1)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(SUPERSETS))
    def test_superset_and_subset_are_intersected(self, p1, p2):
        assert p2.is_intersected_with(p1)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(SUPERSETS))
    def test_subset_and_superset_are_symmetrically_intersectable(self, p1, p2):
        assert p1.is_intersected_with(p2)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(NOT_INTERSECTIONS))
    def test_not_intersections_are_not_intersected(self, p1, p2):
        assert not p1.is_intersected_with(p2)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(NOT_INTERSECTIONS))
    def test_not_intersections_are_symmetrically_not_intersected(self, p1, p2):
        assert not p2.is_intersected_with(p1)


class TestNumberIsEquivalentTo:
    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(EQUIVALENTS))
    def test_equivalents_are_equivalent(self, p1, p2):
        assert p1.is_equivalent_to(p2)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(EQUIVALENTS))
    def test_equivalents_are_symmetrically_equivalent(self, p1, p2):
        assert p2.is_equivalent_to(p1)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(SUPERSETS))
    def test_subset_is_not_equivalent_to_superset(self, p1, p2):
        if p1.is_equivalent_to(p2):
            return
        assert not p2.is_equivalent_to(p1)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(SUPERSETS))
    def test_superset_is_not_equivalent_to_subset(self, p1, p2):
        if p1.is_equivalent_to(p2):
            return
        assert not p1.is_equivalent_to(p2)

    @pytest.mark.parametrize(['p1', 'p2'], **get_params_argv(NOT_INTERSECTIONS))
    def test_non_intersecting_are_not_equivalent(self, p1, p2):
        assert not p1.is_equivalent_to(p2)


class TestNumberPredicates:
    # NumberEqualTo tests
    @pytest.mark.parametrize(
        ['value', 'test_value', 'expected'],
        [
            [5.0, 5.0, True],
            [5.0, 5, False],  # int vs float with NumberPredicate
            [5.5, 5.5, True],
            [5.0, 5.1, False],
            [0.0, -0.0, True],
            [1.23, 1.23, True],
            [1.23, 1.230, True],  # Trailing zero in test_value often makes it equal
            # [5.0, None, False],
            [5.0, "5.0", False],
        ],
    )
    def test_number_equal_to(self, value, test_value, expected):
        predicate = NumberEqualTo(value=value)
        assert predicate.is_matched(test_value) == expected

    # NumberGreaterThan tests
    @pytest.mark.parametrize(
        ['value', 'test_value', 'expected'],
        [
            [5.0, 6.0, True],
            [5.0, 5.0001, True],
            [5.0, 5.0, False],
            [5.0, 4.9999, False],
            [5.5, 5.6, True],
            [5.5, 5.4, False],
        ],
    )
    def test_number_greater_than(self, value, test_value, expected):
        predicate = NumberGreaterThan(value=value)
        assert predicate.is_matched(test_value) == expected

    # NumberGreaterOrEqualThan tests
    @pytest.mark.parametrize(
        ['value', 'test_value', 'expected'],
        [
            [5.0, 6.0, True],
            [5.0, 5.0, True],
            [5.0, 4.9999, False],
            [5.5, 5.5, True],
            [5.5, 5.6, True],
        ],
    )
    def test_number_greater_or_equal_than(self, value, test_value, expected):
        predicate = NumberGreaterOrEqualThan(value=value)
        assert predicate.is_matched(test_value) == expected

    # NumberLessThan tests
    @pytest.mark.parametrize(
        ['value', 'test_value', 'expected'],
        [
            [5.0, 4.0, True],
            [5.0, 4.9999, True],
            [5.0, 5.0, False],
            [5.0, 5.0001, False],
            [5.5, 5.4, True],
        ],
    )
    def test_number_less_than(self, value, test_value, expected):
        predicate = NumberLessThan(value=value)
        assert predicate.is_matched(test_value) == expected

    # NumberLessOrEqualThan tests
    @pytest.mark.parametrize(
        ['value', 'test_value', 'expected'],
        [
            [5.0, 4.0, True],
            [5.0, 5.0, True],
            [5.0, 5.0001, False],
            [5.5, 5.5, True],
            [5.5, 5.4, True],
        ],
    )
    def test_number_less_or_equal_than(self, value, test_value, expected):
        predicate = NumberLessOrEqualThan(value=value)
        assert predicate.is_matched(test_value) == expected

    # NotPredicate tests
    @pytest.mark.parametrize(
        ['predicate', 'test_value', 'expected'],
        [
            [NumberEqualTo(value=5.0), 5.0, False],
            [NumberEqualTo(value=5.5), 5.5, False],
            [NumberEqualTo(value=5.0), 5.1, True],
            [NumberGreaterThan(value=5.0), 6.0, False],
            [NumberGreaterThan(value=5.5), 5.6, False],
            [NumberGreaterThan(value=5.0), 4.0, True],
        ],
    )
    def test_number_not(self, predicate, test_value, expected):
        not_predicate = NotPredicate(predicate=predicate)
        assert not_predicate.is_matched(test_value) == expected

    # AndPredicate tests
    @pytest.mark.parametrize(
        ['predicates', 'test_value', 'expected'],
        [
            [[NumberEqualTo(value=5.0), NumberLessThan(value=10.0)], 5.0, True],
            [[NumberEqualTo(value=5.5), NumberLessThan(value=10.0)], 5.5, True],
            [[NumberEqualTo(value=5.0), NumberLessThan(value=10.0)], 11.0, False],
            [[NumberGreaterThan(value=0.5), NumberLessThan(value=10.5)], 5.0, True],
            [[NumberGreaterThan(value=1.1), NumberLessThan(value=9.9)], 5.5, True],
            # [[], 1.0, True], # Empty And
        ],
    )
    def test_number_and(self, predicates, test_value, expected):
        and_predicate = AndPredicate(predicates=predicates)
        assert and_predicate.is_matched(test_value) == expected

    # OrPredicate tests
    @pytest.mark.parametrize(
        ['predicates', 'test_value', 'expected'],
        [
            [[NumberEqualTo(value=5.0), NumberEqualTo(value=10.0)], 5.0, True],
            [[NumberEqualTo(value=5.5), NumberEqualTo(value=10.5)], 5.5, True],
            [[NumberEqualTo(value=5.0), NumberEqualTo(value=10.0)], 10.0, True],
            [[NumberEqualTo(value=5.0), NumberEqualTo(value=10.0)], 7.5, False],
            [[NumberGreaterThan(value=5.0), NumberLessThan(value=3.0)], 6.0, True],  # 6.0 > 5.0
            [[NumberGreaterThan(value=5.5), NumberLessThan(value=3.5)], 2.0, True],  # 2.0 < 3.5
            [[], 1.0, False],  # Empty Or
        ],
    )
    def test_number_or(self, predicates, test_value, expected):
        or_predicate = OrPredicate(predicates=predicates)
        assert or_predicate.is_matched(test_value) == expected

    # AnyPredicate tests
    @pytest.mark.parametrize(
        'test_value',  # Corrected to be a simple list of values
        [
            0.0,
            5.0,
            5.5,
            -10.0,
            123.456,
            # None,
            "string",
        ],
    )
    def test_number_any(self, test_value):
        any_predicate = AnyPredicate()
        assert any_predicate.is_matched(test_value) is True
