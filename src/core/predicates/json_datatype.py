# class JsonDatatype:
#     """Z3 Datatype for representing JSON-like structures with nested support.
#
#     :ivar _JSON_TYPES: Cache for created JSON types by level
#     :ivar MAX_NESTING_LEVEL: Maximum allowed nesting level (default: 100)
#
#     .. Docstring created by Gemini 2.5 Flash, modified by DeepSeek-V3 (2024)
#     """
#
#     _Z3_JSON_DATATYPES = WeakKeyDictionary()
#     MAX_NESTING_LEVEL = 100
#
#     def __init__(self, level: int, prefix: str, z3_context: z3.Context) -> None:
#         """Initialize JSON Datatype with specified nesting level.
#
#         :param level: Nesting level for JSON structure (None for max level)
#         :type level: int | None
#
#         .. Docstring generated by Gemini 2.5 Flash, modified by Gemini 2.5 Flash
#         """
#         if not self._Z3_JSON_DATATYPES.get(z3_context):
#             self._Z3_JSON_DATATYPES.clear()
#             self._Z3_JSON_DATATYPES[z3_context] = {}
#             self._build_json_type(z3_context)
#         self._level = level
#
#         variable_id = uuid4()
#         var_id = variable_id
#         self._z3_context = z3_context
#         self._var = z3.Const(f'{prefix}_{var_id}', self.JsonType)
#
#     @classmethod
#     def from_var(cls, z3_context, var, level):
#         res = cls(level=level, prefix='var_', z3_context=z3_context)
#         res._var = var
#         res._level = level
#         return res
#
#     @property
#     def JsonType(self):
#         return self._Z3_JSON_DATATYPES[self._z3_context][self._level]
#
#     @property
#     def AllJsonTypes(self):
#         return self._Z3_JSON_DATATYPES[self._z3_context]
#
#     @property
#     def level(self) -> int:
#         return self._level
#
#     @property
#     def z3_variable(self) -> z3.DatatypeRef:
#         """Get Z3 variable reference.
#
#         :return: Z3 datatype variable
#         :rtype: z3.DatatypeRef
#
#         .. Docstring generated by Gemini 2.5 Flash
#         """
#         return self._var
#
#     @classmethod
#     def _build_json_type(cls, z3_context: z3.Context, level: int = 0):
#         """Build and cache Z3 Datatype for JSON representation.
#
#         :param level: Nesting level for JSON type
#         :type level: int
#         :return: Constructed Z3 Datatype
#         :rtype: z3.DatatypeRef
#
#         .. Docstring created by Gemini 2.5 Flash
#         """
#
#         json_datatype = z3.Datatype(f'JsonType_{level}', ctx=z3_context)
#         json_datatype.declare('int', ('get_int', z3.IntSort(ctx=z3_context)))
#         json_datatype.declare('bool', ('get_bool', z3.BoolSort(ctx=z3_context)))
#         json_datatype.declare('str', ('get_str', z3.StringSort(ctx=z3_context)))
#         json_datatype.declare('real', ('get_real', z3.RealSort(ctx=z3_context)))
#         json_datatype.declare('null')
#         json_datatype.declare('undefined')
#
#         if level < cls.MAX_NESTING_LEVEL:
#             nested_json_datatype = cls._build_json_type(z3_context, level + 1)
#             json_datatype.declare(
#                 'object',
#                 ('get_object', z3.ArraySort(z3.StringSort(ctx=z3_context), nested_json_datatype)),
#             )
#             json_datatype.declare(
#                 'array',
#                 ('get_array', z3.SeqSort(nested_json_datatype)),
#             )
#
#         json_datatype_sort = json_datatype.create()
#         cls._Z3_JSON_DATATYPES[z3_context][level] = json_datatype_sort
#         return json_datatype_sort
#
#     # Type checkers
#     def is_bool(self):
#         """Check if value is boolean type.
#
#         :return: Z3 boolean expression
#         :rtype: z3.BoolRef
#
#         .. Docstring generated by Gemini 2.5 Flash
#         """
#         return self.JsonType.is_bool(self._var)
#
#     def is_int(self):
#         """Check if value is integer type.
#
#         :return: Z3 boolean expression
#         :rtype: z3.BoolRef
#
#         .. Docstring generated by Gemini 2.5 Flash
#         """
#         return self.JsonType.is_int(self._var)
#
#     def is_real(self):
#         """Check if value is real number type.
#
#         :return: Z3 boolean expression
#         :rtype: z3.BoolRef
#
#         .. Docstring generated by Gemini 2.5 Flash
#         """
#         return self.JsonType.is_real(self._var)
#
#     def is_str(self):
#         """Check if value is string type.
#
#         :return: Z3 boolean expression
#         :rtype: z3.BoolRef
#
#         .. Docstring generated by Gemini 2.5 Flash
#         """
#         return self.JsonType.is_str(self._var)
#
#     def is_array(self) -> z3.ArrayRef:
#         return self.JsonType.is_array(self._var)
#
#     def is_object(self):
#         """Check if value is object type.
#
#         :return: Z3 boolean expression
#         :rtype: z3.BoolRef
#
#         .. Docstring generated by Gemini 2.5 Flash
#         """
#         return self.JsonType.is_object(self._var)
#
#     def is_null(self) -> z3.ArrayRef:
#         return self.JsonType.is_null(self._var)
#
#     def is_undefined(self):
#         return self.JsonType.is_undefined(self._var)
#
#     # Value getters
#     def get_bool(self) -> z3.BoolRef:
#         """Get boolean value from JSON datatype.
#
#         :return: Z3 boolean reference
#         :rtype: z3.BoolRef
#
#         .. Docstring generated by Gemini 2.5 Flash
#         """
#         return self.JsonType.get_bool(self._var)
#
#     def get_int(self) -> z3.ArithRef:
#         """Get integer value from JSON datatype.
#
#         :return: Z3 integer reference
#         :rtype: z3.ArithRef
#
#         .. Docstring generated by Gemini 2.5 Flash
#         """
#         return self.JsonType.get_int(self._var)
#
#     def get_real(self) -> z3.ArithRef:
#         """Get real number value from JSON datatype.
#
#         :return: Z3 real number reference
#         :rtype: z3.ArithRef
#
#         .. Docstring generated by Gemini 2.5 Flash
#         """
#         return self.JsonType.get_real(self._var)
#
#     def get_str(self) -> z3.SeqRef:
#         """Get string value from JSON datatype.
#
#         :return: Z3 string reference
#         :rtype: z3.SeqRef
#
#         .. Docstring generated by Gemini 2.5 Flash
#         """
#         return self.JsonType.get_str(self._var)
#
#     def get_array(self) -> z3.ArrayRef:
#         return self.JsonType.get_array(self._var)
#
#     def get_object(self) -> z3.DatatypeRef:
#         """Get object value from JSON datatype.
#
#         :return: Z3 object reference
#         :rtype: z3.DatatypeRef
#
#         .. Docstring generated by Gemini 2.5 Flash
#         """
#         return self.JsonType.get_object(self._var)
#
