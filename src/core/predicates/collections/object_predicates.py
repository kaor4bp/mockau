from abc import ABC
from typing import TYPE_CHECKING, Generic, Literal, TypeVar, Union
from uuid import uuid4

import z3
from pydantic import field_validator

from core.predicates.base_predicate import (
    BaseCollectionPredicate,
    BasePredicate,
    GenericPredicateMixin,
    PredicateType,
    VariableContext,
)
from core.predicates.context.predicate_limitations import PredicateLimitations
from core.predicates.helpers import py_value_to_predicate
from core.predicates.scalars.string_predicates import StringEqualTo
from utils.kuhn_matching_algorithm import KuhnMatchingAlgorithm

if TYPE_CHECKING:
    from core.predicates import t_Predicate

_t_SpecifiedType = TypeVar('_t_SpecifiedType')


class BaseGenericObjectPredicate(
    BaseCollectionPredicate,
    GenericPredicateMixin[_t_SpecifiedType],
    Generic[_t_SpecifiedType],
    ABC,
):
    """Base class for object predicates handling JSON-like structures.

    :ivar value: Dictionary representing the object structure with key-value predicates
    :vartype value: dict[BasePredicate, BasePredicate]

    .. Docstring generated by DeepSeek-V3
    """

    value: dict[
        Union[
            't_Predicate',
            str,
        ],
        _t_SpecifiedType,
    ]

    def compile_predicate(self):
        return self._get_universal_origin()(value={k: v.compile_predicate() for k, v in self.value.items()})

    @field_validator('value', mode='before')
    @classmethod
    def handle_py2predicate(cls, data):
        if not isinstance(data, dict):
            return data

        for key_item, value_item in list(data.items()):
            if not isinstance(key_item, BasePredicate):
                new_key_predicate = StringEqualTo(value=key_item)
                data[new_key_predicate] = data.pop(key_item)
                key_item = new_key_predicate
            if not isinstance(value_item, BasePredicate):
                data[key_item] = py_value_to_predicate(value_item)

        return data

    @field_validator('value', mode='after')
    @classmethod
    def validate_predicates(cls, value):
        for key_pred, val_pred in value.items():
            if not isinstance(key_pred, BasePredicate):
                raise ValueError(f'Key predicate must be a BasePredicate, got {key_pred}')
            if not isinstance(val_pred, BasePredicate):
                raise ValueError(f'Value predicate must be a BasePredicate, got {val_pred}')
        return value

    @property
    def predicate_types(self) -> set[PredicateType]:
        """Get supported predicate types for this class.

        :return: Set containing only Object type
        :rtype: set[PredicateType]

        .. Docstring generated by DeepSeek-V3
        """
        return {PredicateType.Object}

    def calculate_limitations(self) -> PredicateLimitations:
        limitation = PredicateLimitations(
            level_gte=0,
            level_lte=0,
        )

        for item in self.value.keys():
            limitation.push(item.calculate_limitations().increment_level())
        for item in self.value.values():
            limitation.push(item.calculate_limitations().increment_level())

        return limitation


class GenericObjectEqualTo(
    BaseGenericObjectPredicate[_t_SpecifiedType],
    Generic[_t_SpecifiedType],
):
    type_of: Literal['$-mockau-object-equal-to'] = '$-mockau-object-equal-to'
    value: dict[
        Union[
            't_Predicate',
            str,
        ],
        _t_SpecifiedType,
    ]

    def verify(self, value: dict):
        if not isinstance(value, dict):
            return False

        graph = {}

        for pred_k, pred_v in self.value.items():
            graph[pred_k] = []
            for k, v in value.items():
                if pred_k.verify(k) and pred_v.verify(v):
                    graph[pred_k].append(pred_v)
                    break

        best_candidate = KuhnMatchingAlgorithm(graph).find_max_matching()
        return len(best_candidate.keys()) == len(self.value.keys()) == len(value.keys())

    def __invert__(self):
        from core.predicates import ObjectNotEqualTo

        return ObjectNotEqualTo(value=self.value)

    def to_z3(self, ctx: VariableContext) -> z3.ExprRef:
        z3_object_variable = ctx.get_variable(predicate_type=PredicateType.Object)

        child_ctx = ctx.create_child_context()
        child_ctx.get_variable(PredicateType.Undefined)
        my_arr = z3.K(z3.StringSort(ctx=ctx.z3_context), child_ctx.json_type_variable.z3_variable)

        existing_key_vars = []
        key_constraints = []

        constraints = [child_ctx.pop_from_global_constraints()]

        for key_pred, value_pred in self.value.items():
            key_context = ctx.create_child_context()
            value_context = ctx.create_child_context()

            constraints += [
                key_pred.to_z3(key_context),
                value_pred.to_z3(value_context),
                key_context.pop_from_global_constraints(),
                value_context.pop_from_global_constraints(),
            ]

            key_var = key_context.get_variable(PredicateType.String)
            my_arr = z3.Store(my_arr, key_var, value_context.json_type_variable.z3_variable)
            ctx.register_key_var(key_var)

            for v in existing_key_vars:
                key_constraints.append(key_var != v)
            existing_key_vars.append(key_var)

            del key_context
            del value_context

        constraints += [
            z3_object_variable == my_arr,
            ctx.json_type_variable.is_object(),
        ]

        return z3.And(*constraints, *key_constraints, z3.BoolVal(True, ctx=ctx.z3_context))


class GenericObjectNotEqualTo(
    BaseGenericObjectPredicate[_t_SpecifiedType],
    Generic[_t_SpecifiedType],
):
    type_of: Literal['$-mockau-object-not-equal-to'] = '$-mockau-object-not-equal-to'
    value: dict[
        Union[
            't_Predicate',
            str,
        ],
        _t_SpecifiedType,
    ]

    def verify(self, value: dict):
        if not isinstance(value, dict):
            return False

        graph = {}

        for pred_k, pred_v in self.value.items():
            graph[pred_k] = []
            for k, v in value.items():
                if pred_k.verify(k) and pred_v.verify(v):
                    graph[pred_k].append(pred_v)
                    break

        best_candidate = KuhnMatchingAlgorithm(graph).find_max_matching()
        return len(best_candidate.keys()) != len(self.value.keys()) and len(best_candidate.keys()) != len(value.keys())

    def __invert__(self):
        from core.predicates import ObjectEqualTo

        return ObjectEqualTo(value=self.value)

    def to_z3(self, ctx: VariableContext) -> z3.ExprRef:
        from core.predicates import NotPredicate

        z3_object_variable = ctx.get_variable(predicate_type=PredicateType.Object)
        all_keys_set = z3.EmptySet(z3.StringSort(ctx=ctx.z3_context))
        existing_key_vars = []

        constraints = []
        or_constraints = [z3.BoolVal(False, ctx=ctx.z3_context)]

        for key_pred, value_pred in self.value.items():
            key_context = ctx.create_child_context()
            value_context = ctx.create_child_context()

            constraints += [
                key_pred.to_z3(key_context),
                NotPredicate(predicate=value_pred).to_z3(value_context),
                key_context.pop_from_global_constraints(),
                value_context.pop_from_global_constraints(),
            ]

            key_var = key_context.get_variable(PredicateType.String)
            or_constraints.append(z3_object_variable[key_var] == value_context.json_type_variable.z3_variable)

            all_keys_set = z3.SetAdd(all_keys_set, key_var)
            ctx.register_key_var(key_var)

            for v in existing_key_vars:
                constraints.append(key_var != v)
            existing_key_vars.append(key_var)

            del key_context
            del value_context

        j = z3.String(f'j_{uuid4()}', ctx=ctx.z3_context)
        child_ctx = ctx.create_child_context()
        child_ctx.get_variable(PredicateType.Undefined)
        or_constraints.append(
            z3.And(
                z3.Not(z3.IsMember(j, all_keys_set), ctx=ctx.z3_context),
                z3_object_variable[j] != child_ctx.json_type_variable.z3_variable,
            )
        )
        # or_constraints.append(
        #     z3.ForAll(
        #         j,
        #         z3.Implies(
        #             z3.Not(z3.IsMember(j, all_keys_set)),
        #             z3_object_variable[j] != child_ctx.json_type_variable.z3_variable,
        #         ),
        #     )
        # )
        constraints += [
            ctx.json_type_variable.is_object(),
            child_ctx.pop_from_global_constraints(),
        ]

        del child_ctx

        return z3.And(*constraints, z3.Or(*or_constraints))


class GenericObjectContainsSubset(
    BaseGenericObjectPredicate[_t_SpecifiedType],
    Generic[_t_SpecifiedType],
):
    type_of: Literal['$-mockau-object-contains'] = '$-mockau-object-contains'

    value: dict[
        Union[
            't_Predicate',
            str,
        ],
        _t_SpecifiedType,
    ]

    def verify(self, value: dict):
        if not isinstance(value, dict):
            return False

        graph = {}

        for pred_k, pred_v in self.value.items():
            graph[pred_k] = []
            for k, v in value.items():
                if pred_k.verify(k) and pred_v.verify(v):
                    graph[pred_k].append(pred_v)
                    break

        best_candidate = KuhnMatchingAlgorithm(graph).find_max_matching()
        return len(best_candidate.keys()) >= len(self.value.keys())

    def __invert__(self):
        from core.predicates import ObjectNotContainsSubset

        return ObjectNotContainsSubset(value=self.value)

    def to_z3(self, ctx: VariableContext) -> z3.ExprRef:
        z3_object_variable = ctx.get_variable(predicate_type=PredicateType.Object)
        constraints = []
        existing_key_vars = []

        for key_pred, value_pred in self.value.items():
            key_context = ctx.create_child_context()
            value_context = ctx.create_child_context()

            constraints += [
                key_pred.to_z3(key_context),
                value_pred.to_z3(value_context),
                key_context.pop_from_global_constraints(),
                value_context.pop_from_global_constraints(),
            ]

            key_var = key_context.get_variable(PredicateType.String)
            constraints.append(value_context.json_type_variable.z3_variable == z3_object_variable[key_var])
            ctx.register_key_var(key_var)

            for v in existing_key_vars:
                constraints.append(key_var != v)
            existing_key_vars.append(key_var)

            del key_context
            del value_context

        constraints.append(ctx.json_type_variable.is_object())

        return z3.And(*constraints, z3.BoolVal(True, ctx=ctx.z3_context))


class GenericObjectNotContainsSubset(
    BaseGenericObjectPredicate[_t_SpecifiedType],
    Generic[_t_SpecifiedType],
):
    type_of: Literal['$-mockau-object-not-contains'] = '$-mockau-object-not-contains'
    value: dict[
        Union[
            't_Predicate',
            str,
        ],
        _t_SpecifiedType,
    ]

    def verify(self, value: dict):
        if not isinstance(value, dict):
            return False

        graph = {}

        for pred_k, pred_v in self.value.items():
            graph[pred_k] = []
            for k, v in value.items():
                if pred_k.verify(k) and pred_v.verify(v):
                    graph[pred_k].append(pred_v)
                    break

        best_candidate = KuhnMatchingAlgorithm(graph).find_max_matching()
        return len(best_candidate.keys()) < len(self.value.keys())

    def __invert__(self):
        from core.predicates import ObjectContainsSubset

        return ObjectContainsSubset(value=self.value)

    def to_z3(self, ctx: VariableContext) -> z3.ExprRef:
        from core.predicates import NotPredicate

        z3_object_variable = ctx.get_variable(predicate_type=PredicateType.Object)
        constraints = []
        existing_key_vars = []

        child_ctx = ctx.create_child_context()
        child_ctx.get_variable(PredicateType.Undefined)
        undefined_var = child_ctx.json_type_variable.z3_variable
        or_constraints = [z3.BoolVal(False, ctx=ctx.z3_context)]

        for key_pred, value_pred in self.value.items():
            key_context = ctx.create_child_context()
            value_context = ctx.create_child_context()

            constraints += [
                key_pred.to_z3(key_context),
                NotPredicate(predicate=value_pred).to_z3(value_context),
                key_context.pop_from_global_constraints(),
                value_context.pop_from_global_constraints(),
            ]

            key_var = key_context.get_variable(PredicateType.String)
            or_constraints += [
                z3_object_variable[key_var] == value_context.json_type_variable.z3_variable,
                z3_object_variable[key_var] == undefined_var,
            ]
            ctx.register_key_var(key_var)
            for v in existing_key_vars:
                constraints.append(key_var != v)
            existing_key_vars.append(key_var)

            del key_context
            del value_context

        constraints.append(ctx.json_type_variable.is_object())

        return z3.And(*constraints, z3.Or(*or_constraints))


class GenericObjectHasValue(
    BaseCollectionPredicate,
    GenericPredicateMixin[_t_SpecifiedType],
    Generic[_t_SpecifiedType],
):
    type_of: Literal['$-mockau-object-has-value'] = '$-mockau-object-has-value'
    predicate: _t_SpecifiedType

    def compile_predicate(self):
        return self._get_universal_origin()(predicate=self.predicate.compile_predicate())

    @field_validator('predicate', mode='before')
    @classmethod
    def handle_py2predicate(cls, data):
        if not isinstance(data, BasePredicate):
            return py_value_to_predicate(data)
        else:
            return data

    def verify(self, value: dict):
        if not isinstance(value, dict):
            return False

        for v in value.values():
            if self.predicate.verify(v):
                return True
        return False

    def __invert__(self):
        from core.predicates import ObjectHasNoValue

        return ObjectHasNoValue(predicate=self.predicate)

    @property
    def predicate_types(self) -> set[PredicateType]:
        return {PredicateType.Object}

    def to_z3(self, ctx: VariableContext) -> z3.ExprRef:
        z3_object_variable = ctx.get_variable(predicate_type=PredicateType.Object)
        constraints = []

        child_ctx = ctx.create_child_context()
        constraints.append(self.predicate.to_z3(child_ctx))
        key_var = z3.String(f'key_{uuid4()}', ctx=ctx.z3_context)
        constraints.append(z3_object_variable[key_var] == child_ctx.json_type_variable.z3_variable)
        constraints.append(ctx.json_type_variable.is_object())
        ctx.register_key_var(key_var)

        return z3.And(*constraints, z3.BoolVal(True, ctx=ctx.z3_context))

    def calculate_limitations(self) -> PredicateLimitations:
        limitation = PredicateLimitations(
            level_gte=0,
            level_lte=0,
        )

        limitation.push(self.predicate.calculate_limitations().increment_level())
        return limitation


class GenericObjectHasNoValue(
    BaseCollectionPredicate,
    GenericPredicateMixin[_t_SpecifiedType],
    Generic[_t_SpecifiedType],
):
    type_of: Literal['$-mockau-object-has-no-value'] = '$-mockau-object-has-no-value'
    predicate: _t_SpecifiedType

    def compile_predicate(self):
        return self._get_universal_origin()(predicate=self.predicate.compile_predicate())

    @field_validator('predicate', mode='before')
    @classmethod
    def handle_py2predicate(cls, data):
        if not isinstance(data, BasePredicate):
            return py_value_to_predicate(data)
        else:
            return data

    def verify(self, value: dict):
        if not isinstance(value, dict):
            return False

        for v in value.values():
            if self.predicate.verify(v):
                return False
        return True

    def __invert__(self):
        from core.predicates import ObjectHasValue

        return ObjectHasValue(predicate=self.predicate)

    @property
    def predicate_types(self) -> set[PredicateType]:
        return {PredicateType.Object}

    def to_z3(self, ctx: VariableContext) -> z3.ExprRef:
        from core.predicates import NotPredicate

        z3_object_variable = ctx.get_variable(predicate_type=PredicateType.Object)
        constraints = []
        or_constraints = [z3.BoolVal(False, ctx=ctx.z3_context)]

        child_ctx = ctx.create_child_context()
        constraints.append(NotPredicate(predicate=self.predicate).to_z3(child_ctx))

        j = z3.String(f'j_{uuid4()}', ctx=ctx.z3_context)
        or_constraints.append(
            z3.ForAll(
                j,
                z3_object_variable[j] == child_ctx.json_type_variable.z3_variable,
            )
        )
        constraints.append(ctx.json_type_variable.is_object())

        return z3.And(*constraints, z3.Or(*or_constraints))

    def calculate_limitations(self) -> PredicateLimitations:
        limitation = PredicateLimitations(
            level_gte=0,
            level_lte=0,
        )

        limitation.push(self.predicate.calculate_limitations().increment_level())
        return limitation
