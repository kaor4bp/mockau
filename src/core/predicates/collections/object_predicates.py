from typing import Self

import z3
from pydantic import model_validator

from core.predicates.base_predicate import BaseCollectionPredicate, BasePredicate, PredicateType, VariableContext
from core.predicates.helpers import value_to_predicate


class BaseObjectPredicate(BaseCollectionPredicate):
    """Base class for object predicates handling JSON-like structures.

    :ivar value: Dictionary representing the object structure with key-value predicates
    :vartype value: dict[BasePredicate, BasePredicate]

    .. Docstring generated by DeepSeek-V3
    """

    value: dict

    @model_validator(mode='after')
    def handle_nested_objects(self) -> Self:
        """Convert raw values in the object to proper predicates.

        Automatically converts non-predicate keys and values to their predicate equivalents.
        Called automatically by Pydantic during model validation.

        :return: Self with converted predicates
        :rtype: Self

        .. Docstring generated by DeepSeek-V3, modified by Gemini 2.5 Flash
        """
        for key_item, value_item in list(self.value.items()):
            if not isinstance(key_item, BasePredicate):
                new_key_predicate = value_to_predicate(key_item)
                self.value[new_key_predicate] = self.value.pop(key_item)
                key_item = new_key_predicate
            if not isinstance(value_item, BasePredicate):
                self.value[key_item] = value_to_predicate(value_item)
        return self

    @property
    def predicate_types(self) -> set[PredicateType]:
        """Get supported predicate types for this class.

        :return: Set containing only Object type
        :rtype: set[PredicateType]

        .. Docstring generated by DeepSeek-V3
        """
        return {PredicateType.Object}

    def to_z3(self, ctx: VariableContext) -> z3.ExprRef:
        """Convert the object predicate to Z3 constraints.

        :param ctx: Variable context for Z3 expressions
        :type ctx: VariableContext
        :return: Z3 expression representing the object constraints
        :rtype: z3.ExprRef
        :raises NotImplementedError: For unsupported predicate subclasses

        .. Docstring generated by DeepSeek-V3, modified by Gemini 2.5 Flash
        """
        z3_object_variable = ctx.get_variable(predicate_type=PredicateType.Object)
        all_defined_keys_set = z3.EmptySet(z3.StringSort())
        all_defined_keys_list = []
        object_constraints = []

        for key_pred, value_pred in self.value.items():
            key_context = ctx.create_child_context()
            value_context = ctx.create_child_context()
            ctx.push_to_global_constraints(key_pred.to_z3(key_context))
            object_constraints.append(value_pred.to_z3(value_context))

            current_key_variable = key_context.get_variable(PredicateType.String)
            all_defined_keys_list.append(current_key_variable)
            all_defined_keys_set = z3.SetAdd(all_defined_keys_set, current_key_variable)
            ctx.push_to_global_constraints(
                z3.Select(z3_object_variable, current_key_variable) == value_context.json_type_variable.z3_variable
            )

        if isinstance(self, ObjectContainsSubset):
            object_constraints += [
                ctx.json_type_variable.get_object_keys_quantity() >= z3.IntVal(len(self.value.keys())),
                z3.IsSubset(all_defined_keys_set, ctx.json_type_variable.get_object_keys()),
            ]
        elif isinstance(self, ObjectEqualTo):
            object_constraints += [
                ctx.json_type_variable.get_object_keys_quantity() == z3.IntVal(len(self.value.keys())),
                ctx.json_type_variable.get_object_keys() == all_defined_keys_set,
            ]
        else:
            raise NotImplementedError(f'to_z3 for ObjectPredicate {self} not implemented yet')

        object_constraints += [
            z3.Distinct(z3_object_variable),
            z3.Distinct(all_defined_keys_set),
        ]

        return z3.And(*object_constraints)


class ObjectEqualTo(BaseObjectPredicate):
    """Predicate for exact object equality matching.

    Inherits all functionality from BaseObjectPredicate while enforcing:
    - Exact key set match
    - Exact value matches for all keys

    .. Docstring generated by DeepSeek-V3
    """

    pass


class ObjectContainsSubset(BaseObjectPredicate):
    """Predicate for partial object matching (subset check).

    Inherits all functionality from BaseObjectPredicate while enforcing:
    - Subset key check
    - Value matches only for specified keys
    - Allows additional keys in the target object

    .. Docstring generated by DeepSeek-V3
    """

    pass
