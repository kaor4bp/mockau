"""
Generated by Gemini AI 2.5 Pro
"""

from utils.kuhn_matching_algorithm import KuhnMatchingAlgorithm


class TestKuhnMatchingAlgorithm:
    """Tests for Kuhn's algorithm for finding maximum bipartite matching"""

    def test_simple_bipartite_graph(self):
        """Simple bipartite graph with perfect matching"""
        graph = {'A': [1], 'B': [2], 'C': [3]}
        kuhn = KuhnMatchingAlgorithm(graph)
        matching = kuhn.find_max_matching()

        assert len(matching) == 3
        assert matching == {'A': 1, 'B': 2, 'C': 3}

    def test_empty_matching(self):
        """Graph with no possible matches"""
        graph = {'A': [], 'B': [], 'C': []}
        kuhn = KuhnMatchingAlgorithm(graph)
        matching = kuhn.find_max_matching()

        assert all(v is None for v in matching.values())

    def test_partial_matching(self):
        """Graph with partial matching"""
        graph = {'A': [1, 2], 'B': [2], 'C': [4], 'D': [4]}
        kuhn = KuhnMatchingAlgorithm(graph)
        matching = kuhn.find_max_matching()

        matched = [v for v in matching.values() if v is not None]
        assert len(matched) == 3  # Maximum possible matches
        assert matching['A'] in [1, 2]
        if matching['A'] == 2:
            assert matching['B'] is None
        assert matching['C'] in [4]
        if matching['C'] == 4:
            assert matching.get('D') is None

    def test_complex_graph(self):
        """More complex bipartite graph"""
        graph = {1: ['a', 'b'], 2: ['a'], 3: ['b', 'c'], 4: ['c', 'd'], 5: ['d']}
        kuhn = KuhnMatchingAlgorithm(graph)
        matching = kuhn.find_max_matching()

        # Verify all matches are unique
        matched_right = {v for v in matching.values() if v is not None}
        assert len(matched_right) == len([v for v in matching.values() if v is not None])

        # Verify all matches exist in original graph
        for left, right in matching.items():
            if right is not None:
                assert right in graph[left]

    def test_string_vertices(self):
        """Graph with string vertices"""
        graph = {'John': ['apple', 'banana'], 'Alice': ['banana'], 'Bob': ['apple', 'cherry']}
        kuhn = KuhnMatchingAlgorithm(graph)
        matching = kuhn.find_max_matching()

        assert len(matching) == 3
        assert matching['John'] in ['apple', 'banana']
        assert matching['Bob'] in ['apple', 'cherry']

    def test_perfect_matching(self):
        """Graph with perfect matching"""
        graph = {1: ['a'], 2: ['b'], 3: ['c'], 4: ['d']}
        kuhn = KuhnMatchingAlgorithm(graph)
        matching = kuhn.find_max_matching()

        assert matching == {1: 'a', 2: 'b', 3: 'c', 4: 'd'}
        assert len(matching) == 4

    def test_duplicate_edges(self):
        """Graph with duplicate edges"""
        graph = {'X': [10, 10, 20], 'Y': [20, 30], 'Z': [30, 30, 40]}
        kuhn = KuhnMatchingAlgorithm(graph)
        matching = kuhn.find_max_matching()

        # Verify matches are unique
        right_values = [v for v in matching.values() if v is not None]
        assert len(right_values) == len(set(right_values))

        # Verify maximum matching found
        assert len(right_values) == 3

    def test_empty_graph(self):
        """Empty graph"""
        graph = {}
        kuhn = KuhnMatchingAlgorithm(graph)
        matching = kuhn.find_max_matching()

        assert matching == {}

    def test_single_vertex_graph(self):
        """Graph with single vertex"""
        graph = {'A': [1]}
        kuhn = KuhnMatchingAlgorithm(graph)
        matching = kuhn.find_max_matching()

        assert matching == {'A': 1}

    def test_disconnected_graph(self):
        """Disconnected graph"""
        graph = {'A': [1], 'B': [2], 'C': [3], 'D': [], 'E': [4, 5]}
        kuhn = KuhnMatchingAlgorithm(graph)
        matching = kuhn.find_max_matching()

        assert len([v for v in matching.values() if v is not None]) == 4

    def test_multiple_optimal_solutions(self):
        """Graph with multiple possible optimal matchings"""
        graph = {'A': [1, 2], 'B': [2, 3], 'C': [3, 4]}
        kuhn = KuhnMatchingAlgorithm(graph)
        matching = kuhn.find_max_matching()

        # Should find a matching of size 3 (perfect matching)
        assert len([v for v in matching.values() if v is not None]) == 3
        # Verify no vertex is matched twice
        assert len({v for v in matching.values() if v is not None}) == 3
